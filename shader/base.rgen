#version 460
#extension GL_EXT_ray_tracing : enable

#include "./share.h"
#include "./random.glsl"
#include "./color.glsl"

layout(location = 0) rayPayloadEXT HitPayload payload;

void main()
{
    const vec2 screenPos = vec2(gl_LaunchIDEXT.xy);
    const vec2 samplingRadius = 2.0 / vec2(gl_LaunchSizeEXT.xy);
    
    vec2 uv;
    uv.x = float(gl_LaunchIDEXT.x) / float(gl_LaunchSizeEXT.x) * 2.0 - 1.0;
    uv.y = (1.0 - float(gl_LaunchIDEXT.y) / float(gl_LaunchSizeEXT.y)) * 2.0 - 1.0;
    
    vec4 origin = pc.invView * vec4(0, 0, 0, 1);

    uvec2 s = pcg2d(gl_LaunchIDEXT.xy * (pc.frame + 1));
    payload.seed = s.x + s.y;
    vec3 radiance = vec3(0.0);
    for(int i = 0; i < pc.sampleCount; i++){
        vec2 offset    = vec2(rand(payload.seed), rand(payload.seed)) * samplingRadius;
        vec4 target    = pc.invProj * vec4(uv.xy + offset, 1, 1);
        vec4 direction = pc.invView * vec4(normalize(target.xyz), 0);
        payload.radiance = vec3(0.0);
        payload.depth = 0;
        payload.component = -1;
        payload.t = 0.0;
        traceRayEXT(
            topLevelAS,
            gl_RayFlagsOpaqueEXT,
            0xff, // cullMask
            0,    // sbtRecordOffset
            0,    // sbtRecordStride
            0,    // missIndex
            origin.xyz,
            0.001,
            direction.xyz,
            10000.0,
            0     // payloadLocation
        );
        radiance += payload.radiance;
    }
    radiance /= pc.sampleCount;
    
    // Store bloom color
    float luminace = computeLuminance(radiance);
    vec3 bloomColor = radiance * max(vec3(0.0), luminace - pc.bloomThreshold);
    imageStore(bloomImage, ivec2(gl_LaunchIDEXT.xy), vec4(bloomColor, 1));

    // Store base color
    vec4 newColor = vec4(radiance, 1);
    if(pc.enableAccum == 1){
        vec4 prevColor = imageLoad(baseImage, ivec2(gl_LaunchIDEXT.xy));
        newColor = (newColor + (prevColor * pc.frame)) / (pc.frame + 1);
    }
    imageStore(baseImage, ivec2(gl_LaunchIDEXT.xy), newColor);
}
